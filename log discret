(*On va supposer connus un certain nombre de paramêtres comme la courbe elliptique, le corps sur lequel on travaille, le point G et le point lG publiés par Alice comme sa clé publique.*)
(*On va maintenant écrire le programme de codage du message de Bob à Alice = la fonction qui va lui dire ce qu'il diot envoyer*)
(*essentiellement Bob va envoyer à Alice un point... On a connu plus romatique, mais bon....*)

let cryptage c p g lg m =
let k= Random.int(p) in 
((mult c p k g), somme ( c p (mult c p k lg) m))
;;

(*Bon çà c'est tout simple... en fait le délire c'est que je ne connais pas vraiment l'ordre du groupe mais on va dire que c'est pas grave...*)

(*Là on commence les choses sérieuses... on suppose que l'attaquant a pu intercepter l'intégralité des informations qui ont été transmises sur un canal public bien entendu.*)

En somme l'attaquant en question connait G lG c p kG M+lkG

maintenant s' il veut connaître M, il va devoir calculer le logarithme en base G de lG ou de kG... Bon a priori, il ne sait pas laquelle des deux est la plus simple

On va commencer par la méthode barbare

let egal P1 P2 =
match P1 P2 with 
|O,O-> true
|P(x1,y1),P(x2,y2)-> (x1=x2 && y1=y2)
|_-> false;;

let log G lG
let i= ref 1 and P= ref 0 in
while( not (egal(somme c p G !P) lG)) do
i:=!i+1;
done;
!i
;;

Et maintenant la méthode fine, celle de l'attaquant mathématicien cultivé... la méthode rho de Pollard!
